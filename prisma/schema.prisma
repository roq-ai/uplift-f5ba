generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model application {
  id                 String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_id             String             @db.Uuid
  freelancer_id      String             @db.Uuid
  status             String             @default("open") @db.VarChar(255)
  created_at         DateTime           @default(now()) @db.Timestamp(6)
  updated_at         DateTime           @default(now()) @db.Timestamp(6)
  freelancer_profile freelancer_profile @relation(fields: [freelancer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job                job                @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?  @db.VarChar(255)
  location    String?  @db.VarChar(255)
  industry    String?  @db.VarChar(255)
  website     String?  @db.VarChar(255)
  name        String   @db.VarChar(255)
  created_at  DateTime @default(now()) @db.Timestamp(6)
  updated_at  DateTime @default(now()) @db.Timestamp(6)
  user_id     String   @db.Uuid
  tenant_id   String   @db.VarChar(255)
  user        user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job         job[]
}

model freelancer_profile {
  id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  freelancer_id  String        @db.Uuid
  skills         String        @db.VarChar(255)
  experience     Int
  portfolio_link String?       @db.VarChar(255)
  created_at     DateTime      @default(now()) @db.Timestamp(6)
  updated_at     DateTime      @default(now()) @db.Timestamp(6)
  name           String        @db.VarChar(255)
  application    application[]
  user           user          @relation(fields: [freelancer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  hiring         hiring[]
}

model hiring {
  id                 String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  created_at         DateTime            @default(now()) @db.Timestamp(6)
  updated_at         DateTime            @default(now()) @db.Timestamp(6)
  job_id             String?             @db.Uuid
  freelancer_id      String?             @db.Uuid
  freelancer_profile freelancer_profile? @relation(fields: [freelancer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  job                job?                @relation(fields: [job_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model job {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String        @db.VarChar(255)
  description  String        @db.VarChar(255)
  requirements String        @db.VarChar(255)
  salary       Int?
  company_id   String        @db.Uuid
  created_at   DateTime      @default(now()) @db.Timestamp(6)
  updated_at   DateTime      @default(now()) @db.Timestamp(6)
  application  application[]
  hiring       hiring[]
  company      company       @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                 String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email              String               @unique @db.VarChar(255)
  firstName          String?              @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  roq_user_id        String               @db.VarChar(255)
  tenant_id          String               @db.VarChar(255)
  created_at         DateTime             @default(now()) @db.Timestamp(6)
  updated_at         DateTime             @default(now()) @db.Timestamp(6)
  company            company[]
  freelancer_profile freelancer_profile[]
}
